{"name":"coding-style","body":"# Именование идентификаторов\r\n\r\n## Общие правила\r\n* ***Помните!*** Код чаще читается, чем пишется, поэтому не экономьте на понятности и чистоте кода ради скорости набора. \r\n* Не используйте малопонятные префиксы или суффиксы. \r\n* Не используйте подчеркивание для отделения слов внутри идентификаторов. \r\n* Используйте стиль именования Кемел или Паскаль.\r\n\r\n## Стили именования\r\n**Паскаль** – указание этого стиля оформления идентификатора обозначает, что первая буква заглавная и все последующие первые буквы слов тоже заглавные. Например, **B**ack**C**olor, **L**ast**M**odified, **D**ate**T**ime.\r\n\r\n**Кэмел** – указание этого стиля обозначает, что первая буква строчная, а остальные первые буквы слов заглавные. Например, **b**order**C**olor, **a**ccess**T**ime, **t**emplate**N**ame.\r\n\r\n## Сокращения\r\n* Не используйте аббревиатуры или неполные слова в идентификаторах, если только они не являются общепринятыми. Например, пишите GetWindow, а не GetWin.\r\n* Если имеется идентификатор длиной менее трех букв, являющийся сокращением, то его записывают заглавными буквами, например System.**IO**, System.Web.**UI**.\r\n* Имена длиннее двух букв записывайте в стиле Паскаль или Кэмел, например Guid, Xml, xmlDocument.\r\n\r\n## Пространства имен\r\n* Используйте стиль Паскаль.\r\n* Для пространства имен используйте имя компании, затем название продукта и, возможно, название подсистемы или существенной части проекта. Например, *Touchin.Framework*, *Touchin.Project.Logic*.\r\n* Не используйте вложенные объявления пространств имен. \r\n\r\n## Классы и структуры\r\n* Используйте стиль Паскаль. \r\n* Используйте существительное (одно или несколько прилагательных и существительное) для имени класса.\r\n* Не используйте специальных префиксов. \r\n\r\n\r\n## Интерфейсы\r\n* Используйте стиль Паскаль для регистра букв.\r\n* Используйте описывающее существительное, прилагательное или одно или несколько прилагательных и существительное для идентификатора интерфейса. Например, IComponent – это описывающее существительное, ICustomAttributeProvider – это конкретизированное прилагательными существительное, а IPersistable – это характеризующее прилагательное.\r\n* Используйте префикс I (заглавная i) для интерфейсов. \r\n* Старайтесь избегать интерфейсов с двумя I в начале, например IIdentifiable.\r\n* Для пары класс-интерфейс, в которой класс является некоторой стандартной реализацией интерфейса, используйте одинаковые имена, отличающиеся только префиксом I для интерфейса. Например, IConfigurationManager и ConfigurationManager.\r\n\r\n\r\n## Перечисления\r\n* Используйте стиль Паскаль для регистра букв в названии и значениях перечисления.\r\n* Не используйте суффикс Enum в названии типа, вместо этого используйте более конкретный суффикс, например Style, Type, Mode, State. \r\n* Если перечисление обладает атрибутом [Flags], используйте множественное число или суффикс Flags.\r\n* Записывайте значения перечисления на отдельных строках.\r\n\r\n## Поля\r\n* Непубличные поля (private, protected и protected internal) именуются в стиле Кэмел и начинаются с префикса _.\r\n* Публичные поля именуются как Свойства\r\n* Старайтесь не использовать публичные поля. \r\n\r\n\r\n## Методы\r\n* Используйте стиль Паскаль (вне зависимости от области видимости метода).\r\n* Используйте глаголы или комбинацию глагола и существительных и прилагательных для имен методов.\r\n\r\n\r\n## Свойства\r\n* Используйте стиль Паскаль.\r\n* В подходящих случаях используйте имя свойства, совпадающее с типом его значения.\r\n* Старайтесь избегать использования имен свойств, совпадающих с названиями каких-либо типов, если значения этих свойств не являются значениями этих типов. \r\n\r\n\r\n## События\r\n* Используйте стиль Паскаль.\r\n* Для имен событий старайтесь использовать глаголы, которые описывают производимое над объектом действие.Например, Click, GotFocus или FontChanged.\r\n* Не используйте суффиксы наподобие On, Before, After. Используйте соответствующую форму глагола, например Closing, Closed.\r\n* При описании события также предоставляйте виртуальный protected-метод, который можно переопределить в классе-наследнике. Называйте такой метод OnXxx, где Xxx – имя события.\r\n* Пытайтесь подобрать стандартный делегат(например, Action<T>) и название для своих событий.\r\n\r\n\r\n## Параметры\r\n* Используйте стиль Кэмел.\r\n* Из имени и типа параметра должны быть понятны его назначение и смысл.\r\n\r\n\r\n# Стиль кода\r\n## Оформление\r\n* Используйте **табуляцию**, а не пробелы для отступов.\r\n\r\n\r\n# Организация проекта\r\n## Типы\r\nВсе не вложенные типы (размещаемые в пространствах имен или непосредственно в глобальном пространстве), за исключением делегатов, должны находиться в отдельных файлах.","tagline":"","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}